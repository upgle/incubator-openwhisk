{
  "_id": "_design/lambda",
  "language": "javascript",
  "views": {
    "rules-with-status": {
      "map": "function (doc) {\n  var PATHSEP = \"/\";\n\n  var isTrigger = function (doc) { return (doc.exec === undefined && doc.binding === undefined && doc.parameters !== undefined) };\n  var isRule = function (doc) {  return (doc.trigger !== undefined) };\n\n  if (isRule(doc)) try {\n    emit([doc.namespace,doc.name], {namespace: doc.namespace, name: doc.name, version: doc.version, publish: doc.publish, annotations: doc.annotations, updated: doc.updated, action: doc.action, trigger: doc.trigger });\n  } catch (e) {}\n\n  if (isTrigger(doc)) try {\n    if(doc.rules){\n      for (var rule in doc.rules) {\n        var temp = rule.split(PATHSEP);\n        emit([temp[0], temp[1]], {\"status\" : doc.rules[rule].status } );                  \n      }          \n    }    \n  } catch (e) {}\n}",
      "reduce": "function (keys, values, reduce) {\n  if(reduce){\n    var merged = [].concat.apply([], values);\n    if (merged.length == 1) {\n      return merged[0];\n    } else if(merged.length > 1){\n      for (var attrname in merged[1]) { merged[0][attrname] = merged[1][attrname]; }\n      return merged[0];\n    }\n  }\n  return values;\n}"
    },
    "bindings": {
      "map": "function (doc) {\n  var PATHSEP = '/';\n  var isPackage = function (doc) {  return (doc.binding !== undefined) };\n  \n  if (isPackage(doc) && Object.keys(doc.binding).length !== 0) try {\n    var date = new Date(doc.start || doc.updated);\n    emit([doc.namespace, date.getTime(), doc.name], {namespace: doc.namespace, name: doc.name, version: doc.version, publish: doc.publish, annotations: doc.annotations, binding: doc.binding});\n  } catch (e) {}\n}"
    },
    "trigger-action": {
      "reduce": "_count",
      "map": "function (doc) {\n  var PATHSEP = \"/\";\n\n  var isTrigger = function (doc) { return (doc.exec === undefined && doc.binding === undefined && doc.parameters !== undefined) };\n  \n  if (isTrigger(doc)) try {\n    var annotations = doc.annotations;\n    var parameters = doc.parameters;\n    if(!doc.rules || Object.keys(doc.rules).length === 0) {\n        emit([doc.namespace, doc.name], { \"parameters\": parameters ,\"name\":doc.namespace + PATHSEP + doc.name ,  \"annotations\" : annotations , \"updated\":doc.updated});      \n    } else {\n      for (var rule in doc.rules) {\n        var ruleInfo = doc.rules[rule];\n        var temp = ruleInfo.action.path.split(PATHSEP);\n        var ns;\n        var action;\n        if(temp.length == 2)  { \n          ns = temp[0];\n          action = temp[1] + PATHSEP + ruleInfo.action.name;\n        } else {\n          ns = temp[0];\n          action = ruleInfo.action.name;\n        }\n        emit([ns, action], { \"parameters\": parameters, \"name\":doc.namespace + PATHSEP + doc.name  , \"rule\": rule, \"action\" : ruleInfo.action.path + PATHSEP + ruleInfo.action.name  , \"annotations\" : annotations  , \"status\":'inactive'  ,\"updated\":doc.updated} );\n      }                \n    }\n  } catch (e) {}\n}"
    },
    "bound-packages": {
      "reduce": "_count",
      "map": "function (doc) {\n  var PATHSEP = '/';\n  var isPackage = function (doc) {  return (doc.binding !== undefined) };\n  \n  if (isPackage(doc) && Object.keys(doc.binding).length !== 0) {\n    var value = {\n      namespace: doc.namespace,\n      name: doc.name,\n      version: doc.version,\n      publish: doc.publish,\n      annotations: doc.annotations,\n      updated: doc.updated\n    };\n    emit([doc.binding.namespace, doc.binding.name, doc.updated], value);\n  }\n}"
    }
  }
}
---
# This role will install Controller in group 'controllers' in the environment inventory

- include: docker_login.yml

- name: get controller index
  set_fact:
    controller_index: "{{ groups['controllers'].index(inventory_hostname) }}"

- name: get controller name
  set_fact:
    controller_name: "controller{{ controller_index }}"

- name: "pull the {{ docker.image.tag }} image of controller"
  shell: "docker pull {{ docker_registry }}{{ docker.image.prefix }}/controller:{{ docker.image.tag }}"
  when: docker_registry != ""
  retries: "{{ docker.pull.retries }}"
  delay: "{{ docker.pull.delay }}"

- name: ensure controller log directory is created with permissions
  file:
    path: "{{ whisk_logs_dir }}/{{ controller_name }}"
    state: directory
    mode: 0777
  become: "{{ logs.dir.become }}"

- name: ensure controller config directory is created with permissions
  file:
    path: "{{ controller.confdir }}/{{ controller_name }}"
    state: directory
    mode: 0777
  become: "{{ controller.dir.become }}"

- name: copy jmxremote password file
  when: jmx.enabled
  template:
    src: "jmxremote.password.j2"
    dest: "{{ controller.confdir }}/{{ controller_name }}/jmxremote.password"
    mode: 0777

- name: copy jmxremote access file
  when: jmx.enabled
  template:
    src: "jmxremote.access.j2"
    dest: "{{ controller.confdir }}/{{ controller_name }}/jmxremote.access"
    mode: 0777

- name: "copy kafka truststore/keystore"
  when: kafka.protocol == 'SSL'
  copy:
    src: "{{ openwhisk_home }}/ansible/roles/kafka/files/{{ kafka.ssl.keystore.name }}"
    dest: "{{ controller.confdir }}/controller{{ groups['controllers'].index(inventory_hostname) }}"

- name: check, that required databases exist
  include: "{{ openwhisk_home }}/ansible/tasks/db/checkDb.yml"
  vars:
    dbName: "{{ item }}"
  with_items:
  - "{{ db.whisk.actions }}"
  - "{{ db.whisk.auth }}"
  - "{{ db.whisk.activations }}"

- name: prepare controller ports
  set_fact:
    ports_to_expose: ["{{ controller.basePort + (controller_index | int) }}:8080", "{{ controller.akka.cluster.basePort + (controller_index | int) }}:{{ controller.akka.cluster.bindPort }}"]

- name: expose additional ports if jmxremote is enabled
  when: jmx.enabled
  set_fact:
    ports_to_expose: "{{ ports_to_expose }} + [ \"{{ jmx.basePortController + (controller_index | int) }}:{{ jmx.basePortController + (controller_index | int)}}\" ] + [ \"{{ jmx.rmiBasePortController + (controller_index | int) }}:{{ jmx.rmiBasePortController + (controller_index | int) }}\" ]"

- name: add additional jvm params if jmxremote is enabled
  when: jmx.enabled
  set_fact:
    controller_args: "{{ controller.arguments }} {{ jmx.jvmCommonArgs }} -Djava.rmi.server.hostname={{ inventory_hostname }} -Dcom.sun.management.jmxremote.rmi.port={{ jmx.rmiBasePortController + (controller_index | int) }} -Dcom.sun.management.jmxremote.port={{ jmx.basePortController + (controller_index | int) }}"

- name: create seed nodes list
  set_fact:
    seed_nodes_list: "{{ seed_nodes_list | default([]) }} + [ \"{{item.1}}:{{controller.akka.cluster.basePort+item.0}}\" ]"
  with_indexed_items:
  - "{{ controller.akka.cluster.seedNodes }}"

# Before redeploy controller, should remove that controller instance from nginx
- name: Judge nginx whether running
  shell: echo $(docker ps | grep nginx | wc -l)
  register: nginxExist
  delegate_to: "{{ item }}"
  with_items: "{{ groups['edge'][0] }}"

- name: Remove the controller from nginx's upstream configuration
  shell:
       docker exec -t nginx sh -c "sed -i  \"s/server {{ ansible_host }}:{{ controller.basePort + (controller_index | int) }}/#server {{ ansible_host }}:{{ controller.basePort + (controller_index | int) }}/g\"  /etc/nginx/nginx.conf  && nginx -s reload"
  delegate_to: "{{ item }}"
  with_items: "{{ groups['edge'] }}"
  when: nginxExist.results[0].stdout != "0"

- name: Sleep some time to wait controller to execute all non-finished actions
  shell: sleep {{ controller.notFinishedActionTime }}

- name: (re)start controller
  docker_container:
    name: "{{ controller_name }}"
    image: "{{ docker_registry }}{{ docker.image.prefix }}/controller:{{ docker.image.tag }}"
    state: started
    recreate: true
    restart_policy: "{{ docker.restart.policy }}"
    hostname: "{{ controller_name }}"
    env:
      "JAVA_OPTS": "-Xmx{{ controller.heap }} -XX:+CrashOnOutOfMemoryError -XX:+UseGCOverheadLimit -XX:ErrorFile=/logs/java_error.log -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=/logs"
      "CONTROLLER_OPTS": "{{ controller_args | default(controller.arguments) }}"
      "CONTROLLER_INSTANCES": "{{ controller.instances }}"
      "JMX_REMOTE": "{{ jmx.enabled }}"

      "COMPONENT_NAME": "{{ controller_name }}"
      "PORT": 8080

      "WHISK_VERSION_NAME": "{{ whisk_version_name }}"
      "WHISK_VERSION_DATE": "{{ whisk.version.date }}"
      "WHISK_VERSION_BUILDNO": "{{ docker.image.tag }}"

      "KAFKA_HOSTS": "{{ kafka_connect_string }}"
      "CONFIG_whisk_kafka_replicationFactor": "{{ kafka.replicationFactor | default() }}"
      "CONFIG_whisk_kafka_topics_cacheInvalidation_retentionBytes": "{{ kafka_topics_cacheInvalidation_retentionBytes | default() }}"
      "CONFIG_whisk_kafka_topics_cacheInvalidation_retentionMs": "{{ kafka_topics_cacheInvalidation_retentionMS | default() }}"
      "CONFIG_whisk_kafka_topics_cacheInvalidation_segmentBytes": "{{ kafka_topics_cacheInvalidation_segmentBytes | default() }}"
      "CONFIG_whisk_kafka_topics_completed_retentionBytes": "{{ kafka_topics_completed_retentionBytes | default() }}"
      "CONFIG_whisk_kafka_topics_completed_retentionMs": "{{ kafka_topics_completed_retentionMS | default() }}"
      "CONFIG_whisk_kafka_topics_completed_segmentBytes": "{{ kafka_topics_completed_segmentBytes | default() }}"
      "CONFIG_whisk_kafka_topics_health_retentionBytes": "{{ kafka_topics_health_retentionBytes | default() }}"
      "CONFIG_whisk_kafka_topics_health_retentionMs": "{{ kafka_topics_health_retentionMS | default() }}"
      "CONFIG_whisk_kafka_topics_health_segmentBytes": "{{ kafka_topics_health_segmentBytes | default() }}"
      "CONFIG_whisk_kafka_common_securityProtocol": "{{ kafka.protocol }}"
      "CONFIG_whisk_kafka_common_sslTruststoreLocation": "/conf/{{ kafka.ssl.keystore.name }}"
      "CONFIG_whisk_kafka_common_sslTruststorePassword": "{{ kafka.ssl.keystore.password }}"
      "CONFIG_whisk_kafka_common_sslKeystoreLocation": "/conf/{{ kafka.ssl.keystore.name }}"
      "CONFIG_whisk_kafka_common_sslKeystorePassword": "{{ kafka.ssl.keystore.password }}"
      "DB_PROTOCOL": "{{ db_protocol }}"
      "DB_PROVIDER": "{{ db_provider }}"
      "DB_HOST": "{{ db_host }}"
      "DB_PORT": "{{ db_port }}"
      "DB_USERNAME": "{{ db_username }}"
      "DB_PASSWORD": "{{ db_password }}"
      "DB_WHISK_AUTHS": "{{ db.whisk.auth }}"
      "DB_WHISK_ACTIONS": "{{ db.whisk.actions }}"
      "DB_WHISK_ACTIVATIONS": "{{ db.whisk.activations }}"
      "CONFIG_whisk_db_actionsDdoc": "{{ db_whisk_actions_ddoc | default() }}"
      "CONFIG_whisk_db_activationsDdoc": "{{ db_whisk_activations_ddoc | default() }}"
      "CONFIG_whisk_db_activationsFilterDdoc": "{{ db_whisk_activations_filter_ddoc | default() }}"

      "LIMITS_ACTIONS_INVOKES_PERMINUTE": "{{ limits.invocationsPerMinute }}"
      "LIMITS_ACTIONS_INVOKES_CONCURRENT": "{{ limits.concurrentInvocations }}"
      "LIMITS_ACTIONS_INVOKES_CONCURRENTINSYSTEM": "{{ limits.concurrentInvocationsSystem }}"
      "LIMITS_TRIGGERS_FIRES_PERMINUTE": "{{ limits.firesPerMinute }}"
      "LIMITS_ACTIONS_SEQUENCE_MAXLENGTH": "{{ limits.sequenceMaxLength }}"

      "CONFIG_whisk_memory_min": "{{ limit_action_memory_min | default() }}"
      "CONFIG_whisk_memory_max": "{{ limit_action_memory_max | default() }}"
      "CONFIG_whisk_memory_std": "{{ limit_action_memory_std | default() }}"

      "CONFIG_whisk_activation_payload_max": "{{ limit_activation_payload | default() }}"

      "RUNTIMES_MANIFEST": "{{ runtimesManifest | to_json }}"
      "CONFIG_whisk_runtimes_defaultImagePrefix": "{{ runtimes_default_image_prefix | default() }}"
      "CONFIG_whisk_runtimes_defaultImageTag": "{{ runtimes_default_image_tag | default() }}"
      "CONFIG_whisk_runtimes_bypassPullForLocalImages": "{{ runtimes_bypass_pull_for_local_images | default() }}"
      "CONFIG_whisk_runtimes_localImagePrefix": "{{ runtimes_local_image_prefix | default() }}"

      "CONTROLLER_LOCALBOOKKEEPING": "{{ controller.localBookkeeping }}"
      "AKKA_CLUSTER_SEED_NODES": "{{seed_nodes_list | join(' ') }}"

      "METRICS_KAMON": "{{ metrics.kamon.enabled }}"
      "METRICS_KAMON_TAGS": "{{ metrics.kamon.tags }}"
      "METRICS_LOG": "{{ metrics.log.enabled }}"

      "CONFIG_whisk_loadbalancer_invokerBusyThreshold": "{{ invoker.busyThreshold }}"
      "CONFIG_whisk_loadbalancer_blackboxFraction": "{{ controller.blackboxFraction }}"

      "CONFIG_akka_actor_provider": "{{ controller.akka.provider }}"
      "CONFIG_akka_remote_netty_tcp_hostname": "{{ controller.akka.cluster.host[(controller_index | int)] }}"
      "CONFIG_akka_remote_netty_tcp_port": "{{ controller.akka.cluster.basePort + (controller_index | int) }}"
      "CONFIG_akka_remote_netty_tcp_bindPort": "{{ controller.akka.cluster.bindPort }}"

      "CONFIG_kamon_statsd_hostname": "{{ metrics.kamon.host }}"
      "CONFIG_kamon_statsd_port": "{{ metrics.kamon.port }}"

      "CONFIG_kamon_npot_datasourceUrl": "{{ metrics.npot.datasource_url | default() }}"
      "CONFIG_kamon_npot_datasourceId": "{{ metrics.npot.datasource_id | default() }}"
      "CONFIG_kamon_npot_datasourceKey": "{{ metrics.npot.datasource_key | default() }}"

      "CONFIG_whisk_spi_LogStoreProvider": "{{ userLogs.spi }}"
      "CONFIG_whisk_spi_LoadBalancerProvider": "{{ controller.loadbalancer.spi }}"
      "CONFIG_logback_log_level": "{{ controller.loglevel }}"

      "CONFIG_whisk_transactions_stride": "{{ transactions.stride | default() }}"
    volumes:
      - "{{ whisk_logs_dir }}/{{ controller_name }}:/logs"
      - "{{ controller.confdir }}/{{ controller_name }}:/conf"
    ports: "{{ ports_to_expose }}"
    command: /bin/sh -c "exec /init.sh {{ controller_index }} >> /logs/{{ controller_name }}_logs.log 2>&1"

- name: make sure controller log has permission to create hardlink to point it
  shell: docker exec -t {{ controller_name }} chmod 777 /logs/{{ controller_name }}_logs.log

- name: wait until the Controller in this host is up and running
  uri:
    url: "http://{{ ansible_host }}:{{ controller.basePort + (controller_index | int) }}/ping"
  register: result
  until: result.status == 200
  retries: 12
  delay: 5

# After redeploy controller, should wait about 30s to make sure all invokers report their own health status to controller through kafka
- name: Sleep some time to make sure all invokers report their own health status to controller
  shell: sleep {{ controller.initTime }}
  when: nginxExist.results[0].stdout != "0"

# When all invokers report their status to controller, add the controller instance to nginx
- name: Add the controller to nginx's upstream configuration
  shell:
      docker exec -t nginx sh -c "sed -i  \"s/#server {{ ansible_host }}:{{ controller.basePort + (controller_index | int) }}/server {{ ansible_host }}:{{ controller.basePort + (controller_index | int) }}/g\"  /etc/nginx/nginx.conf  && nginx -s reload"
  delegate_to: "{{ item }}"
  with_items: "{{ groups['edge'] }}"
  when: nginxExist.results[0].stdout != "0"

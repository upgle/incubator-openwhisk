# Licensed to the Apache Software Foundation (ASF) under one or more contributor
# license agreements; and to You under the Apache License, Version 2.0.
---
- name: Judge current invoker whether deployed
  shell: echo $(docker ps | grep invoker{{ groups['invokers'].index(inventory_hostname) }} | wc -l)
  register: invokerDeployed
  when: zerodowntimeDeployment.enabled == true

- name: Disable invoker{{ groups['invokers'].index(inventory_hostname) }} before remove invoker
  uri:
    url: "http://{{ ansible_host }}:{{ invoker.port + groups['invokers'].index(inventory_hostname) }}/disable"
    method: GET
    status_code: 200
    user: "{{ invoker.username }}"
    password: "{{ invoker.password }}"
    force_basic_auth: yes
  ignore_errors: True
  when: zerodowntimeDeployment.enabled == true and invokerDeployed.stdout != "0"

- name: copy controller cert to invoker nodes
  copy:
    src: "{{ openwhisk_home }}/ansible/roles/controller/files/{{ item }}"
    dest: "/tmp"
  with_items:
        - "{{ controller.ssl.cert }}"
        - "{{ controller.ssl.key }}"
  ignore_errors: True
  when: zerodowntimeDeployment.enabled == true and controller.protocol == 'https'

- name: copy get-running-actions-on-invoker.sh to remote invoker directory when using apicall solution
  template:
    src: "{{ openwhisk_home }}/ansible/roles/invoker/templates/get-running-actions-on-invoker.sh.j2"
    dest: "/tmp/get-running-actions-on-invoker.sh"
    mode: 0777
  when: zerodowntimeDeployment.enabled == true and zerodowntimeDeployment.solution == 'apicall'

- name: wait invoker{{ groups['invokers'].index(inventory_hostname) }} to execute all non-finished actions using apicall solution
  shell: /tmp/get-running-actions-on-invoker.sh {{ groups['invokers'].index(inventory_hostname) }}
  register: runningActionCount
  until: runningActionCount.stdout == '0'
  retries: 60
  delay: 5
  when: zerodowntimeDeployment.enabled == true and zerodowntimeDeployment.solution == 'apicall'
  ignore_errors: True

- name: Sleep some time to wait invoker to execute all non-finished actions using sleep solution
  shell: sleep 70s
  when: zerodowntimeDeployment.enabled == true and zerodowntimeDeployment.solution == 'sleep'

# Remove invoker containers.

- name: get invoker name and index
  set_fact:
    invoker_name: "{{ name_prefix ~ ((invoker_index_base | int) + host_group.index(inventory_hostname)) }}"
    invoker_index: "{{ (invoker_index_base | int) + host_group.index(inventory_hostname) }}"

- name: remove invoker
  docker_container:
    name: "{{ invoker_name }}"
    image: "{{ docker_registry }}{{ docker.image.prefix }}/invoker:{{ docker.image.tag }}"
    state: absent
    stop_timeout: 60
    timeout: 120
  ignore_errors: True

# In case the invoker could not clean up completely in time.
- name: pause/resume at runc-level to restore docker consistency
  shell: |
        DOCKER_PAUSED=$(docker ps --filter status=paused --filter name=wsk{{ invoker_index }} -q --no-trunc)
        for C in $DOCKER_PAUSED; do docker-runc pause $C; done
        DOCKER_RUNNING=$(docker ps --filter status=running --filter name=wsk{{ invoker_index }} -q --no-trunc)
        for C2 in $DOCKER_RUNNING; do docker-runc resume $C2; done
        TOTAL=$(($(echo $DOCKER_PAUSED | wc -w)+$(echo $DOCKER_RUNNING | wc -w)))
        echo "Handled $TOTAL remaining actions."
  register: runc_output
  ignore_errors: True
  become: "{{ invoker.docker.become }}"

- debug: msg="{{ runc_output.stdout }}"

- name: unpause remaining actions
  shell: "docker unpause $(docker ps -aq --filter status=paused --filter name=wsk{{ invoker_index }})"
  failed_when: False

- name: remove remaining actions
  shell: "docker rm -f $(docker ps -aq --filter name=wsk{{ invoker_index }})"
  failed_when: False

- name: remove invoker log directory
  file:
    path: "{{ whisk_logs_dir }}/{{ invoker_name }}"
    state: absent
  become: "{{ logs.dir.become }}"
  when: mode == "clean"

- name: remove invoker conf directory
  file:
    path: "{{ invoker.confdir }}/{{ invoker_name }}"
    state: absent
  become: "{{ invoker.dir.become }}"
  when: mode == "clean"

# Workaround for orphaned ifstate.veth* files on Ubuntu 14.04
# See https://github.com/moby/moby/issues/22513
# Remove inactive files older than 60 minutes
- name: "Clean orphaned ifstate.veth* files on Ubuntu 14.04"
  shell: |
    ACTIVE_VETH_IFACES=$(ip -oneline link show | grep --only-matching --extended-regexp 'veth[0-9a-f]+' | tr '\n' '|' | sed -e 's/.$//')
    EXCLUDE_REGEX=$(if [ -z ${ACTIVE_VETH_IFACES} ]; then echo 'No active veth interfaces found' >&2; else printf '( -not -regex  /run/network/ifstate\.(%s) ) -and ' ${ACTIVE_VETH_IFACES}; fi)
    find /run/network -regextype posix-egrep ${EXCLUDE_REGEX} -name 'ifstate.veth*' -and -mmin +60 -delete
  become: True
  ignore_errors: True
  when: ansible_distribution == 'Ubuntu' and ansible_distribution_version == '14.04'

input {
file {
  path => "/var/log/messages"
  add_field => { "logType" => "docker" }
  type => "docker"
}
{% if couchdbContainerId.stdout != '' %}
file {
  codec => "json"
  path => "/var/lib/docker/containers/{{ couchdbContainerId.stdout }}/{{ couchdbContainerId.stdout }}-json.log"
  add_field => { "logType" => "couchdb" }
  type => "couchdb"
}
{% endif %}
{% if kafkaContainerId.stdout != '' %}
file {
  codec => "json"
  path => "/var/lib/docker/containers/{{ kafkaContainerId.stdout }}/{{ kafkaContainerId.stdout }}-json.log"
  add_field => { "logType" => "kafka" }
  type => "kafka"
}
{% endif %}
{% if zookeeperContainerId.stdout != '' %}
file {
  codec => "json"
  path => "/var/lib/docker/containers/{{ zookeeperContainerId.stdout }}/{{ zookeeperContainerId.stdout }}-json.log"
  add_field => { "logType" => "zookeeper" }
  type => "zookeeper"
}
{% endif %}
}

filter {
  if ([type] == "couchdb") {
    grok {
      match => {
        "log" => "\[%{LOGLEVEL:logLevel}\] %{DATA:timestamp} %{DATA:node} %{DATA:unused} %{DATA:unused} %{GREEDYDATA:body}"
      }
    }
  } else if ([type] == "kafka" ) {
    grok {
      match => {
        "log" => "\[%{DATA:timestamp}\] %{LOGLEVEL:loglevel} (\[%{DATA:component}\]: )?%{GREEDYDATA:body}"
      }
    }
  } else if ([type] == "zookeeper") {
    grok {
      match => {
        "log" => "%{DATA:timestamp} \[%{DATA:unused}\] - %{LOGLEVEL:logLevel}  \[%{GREEDYDATA:compoent}\] - %{GREEDYDATA:body}"
      }
    }
  } else {
    if ([message] !~ "dockerd") {
      drop { }
    } else {
      grok {
        match => {
          "message" => '%{DATA:unused} %{PROG:program}(?:\[%{POSINT:pid}\])?: time="%{DATA:timestamp}" level=%{LOGLEVEL:logLevel} msg="%{GREEDYDATA:body}"'
        }
      }
    }
  }

if ([path] =~ "messages" ) {
    mutate {
      add_field => {
        "projectName" => "{{ nelo.project_name }}"
        "projectVersion" => "{{ nelo.project_version }}"
        "logSource" => "logFile"
      }
     remove_field => ["path","@timestamp","@version", "type", "unused"]
    }
}else{
    json {
      skip_on_invalid_json => false
      source => "text"
    }
    mutate {
      add_field => {
        "projectName" => "{{ nelo.project_name }}"
        "projectVersion" => "{{ nelo.project_version }}"
        "message" => "%{log}"
        "logSource" => "%{stream}"
      }
      remove_field => ["@timestamp","type","path","@version","time","stream","log", "unused"]
    }
}
}

output {
http {
    http_method => "post"
    url => "{{ nelo.serverUrl }}"
    format => "json"
    automatic_retries => 2
}
}

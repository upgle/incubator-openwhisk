---
# This role will run a CouchDB server on the db group

- name: "Set the coordinator to the first node"
  set_fact:
    coordinator: "{{ groups['db'][0] }}"

- name: check if db credentials are valid for CouchDB
  fail: msg="The db provider in your {{ hosts_dir }}/group_vars/all is {{ db_provider }}, it has to be CouchDB, pls double check"
  when: db_provider != "CouchDB"

- name: "set the volume_dir"
  set_fact:
    volume_dir: "{% if db_datadir is defined and db_confdir is defined  %}[ '{{ db_confdir }}:/opt/couchdb/etc', '{{ db_datadir }}:/opt/couchdb/data' ]{% elif db_datadir is undefined  %}{{ db_confdir }}:/opt/couchdb/etc{% else %}{{ db_datadir }}:/opt/couchdb/data{%- endif %}"
  when: db_datadir is defined or db_confdir is defined


- name: ensure CouchDB config directory exists
  file:
    path: "{{ db_confdir }}"
    state: directory
  become: "{{ db.dir.become }}"
  when: db_confdir is defined

- name: synchronize default configuration files from local to remote in CouchDB config directory
  synchronize:
    src: "files/"
    dest: "{{ db_confdir }}"
    delete: yes
    recursive: yes
  become: "{{ db.dir.become }}"
  when: db_confdir is defined

- name: "pull the apache/couchdb:{{ couchdb.version }} image"
  shell: "docker pull apache/couchdb:{{ couchdb.version }}"
  retries: "{{ docker.pull.retries }}"
  delay: "{{ docker.pull.delay }}"

- name: (re)start CouchDB
  docker_container:
    name: couchdb
    image: apache/couchdb:{{ couchdb.version }}
    state: started
    recreate: true
    restart_policy: "{{ docker.restart.policy }}"
    volumes: "{{volume_dir | default([])}}"
    ports:
      - "{{ db_port }}:5984"
      - "4369:4369"
      - "9100:9100"
    env:
      COUCHDB_USER: "{{ db_username }}"
      COUCHDB_PASSWORD: "{{ db_password }}"
      NODENAME: "{{ ansible_host }}"

- name: wait until CouchDB in this host is up and running
  uri:
    url: "{{ db_protocol }}://{{ ansible_host }}:{{ db_port }}/_utils/"
  register: result
  until: result.status == 200
  retries: 12
  delay: 5

- name: create '_users' database for singleton mode
  uri:
    url: "{{ db_protocol }}://{{ ansible_host }}:{{ db_port }}/_users"
    method: PUT
    status_code: 201
    user: "{{ db_username }}"
    password: "{{ db_password }}"
    force_basic_auth: yes
  when: (couchdb.version|version_compare('2.0','>=')) and (db.instances|int == 1)

- name: enable the cluster setup mode
  uri:
    url: "{{ db_protocol }}://{{ ansible_host }}:{{ db_port }}/_cluster_setup"
    method: POST
    body: >
        {"action": "enable_cluster", "bind_address":"0.0.0.0", "username": "{{ db_username }}", "password":"{{ db_password }}", "port": {{ db_port }}, "node_count": "{{ groups['db'] | length }}", "remote_node": "{{ ansible_host }}", "remote_current_user": "{{ db_username }}", "remote_current_password": "{{ db_password }}"}
    body_format: json
    status_code: 201
    user: "{{ db_username }}"
    password: "{{ db_password }}"
    force_basic_auth: yes
  when: inventory_hostname == coordinator

- name: add remote nodes to the cluster
  uri:
    url: "{{ db_protocol }}://{{ coordinator }}:{{ db_port }}/_cluster_setup"
    method: POST
    body: >
        {"action": "add_node", "host":"{{ ansible_host }}", "port": {{ db_port }}, "username": "{{ db_username }}", "password":"{{ db_password }}"}
    body_format: json
    status_code: 201
    user: "{{ db_username }}"
    password: "{{ db_password }}"
    force_basic_auth: yes
  when: (inventory_hostname != coordinator) and (db.instances|int >= 2)

- name: finish the cluster setup mode
  uri:
    url: "{{ db_protocol }}://{{ ansible_host }}:{{ db_port }}/_cluster_setup"
    method: POST
    body: >
        {"action": "finish_cluster"}
    body_format: json
    status_code: 201
    user: "{{ db_username }}"
    password: "{{ db_password }}"
    force_basic_auth: yes
  when: inventory_hostname == coordinator

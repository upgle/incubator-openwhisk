
# -*- mode: ruby -*-
# vi: set ft=ruby :

# Custom OpenWhisk

# vagrant resume issue https://github.com/mitchellh/vagrant/issues/6787
# Don't use vagrant resume, it will run the provisioning a second producing errors
# Use vagrant suspend and vagrant up (using up it skips provisioning)

BOX = "ubuntu/xenial64"
BOX_MEMORY = ENV['BOX_MEMORY'] || '4096'
BOX_CPUS = ENV['BOX_CPUS'] || '4'
MACHINE_IP = ENV['MACHINE_IP'] || '192.168.33.16'
OW_DB = if ENV['OW_DB'] =~ (/^(cloudant|couchdb)$/i) then true else false end

Vagrant.configure('2') do |config|
  config.vm.box = BOX
  config.vm.network :private_network, ip: MACHINE_IP

  # If true, then any SSH connections made will enable agent forwarding.
  # Default value: false
  config.ssh.forward_agent = true

  config.vm.provider :virtualbox do |vb|
    vb.name = 'whisk-' + Time.now.strftime('%y%m%d%H%M')
    vb.gui = ENV['gui'] || false
    vb.cpus = BOX_CPUS
    vb.customize ['modifyvm', :id, '--natdnshostresolver1', 'on']
    vb.customize ['modifyvm', :id, '--natdnsproxy1', 'off']
    vb.customize ['modifyvm', :id, '--ostype', 'Ubuntu_64']
    vb.customize ['modifyvm', :id, '--memory', BOX_MEMORY]
    vb.customize ['modifyvm', :id, '--uartmode1', 'disconnected' ]
  end

  # Shared root of repository; do not use symlinks
  config.vm.synced_folder File.expand_path('..', File.expand_path('..', Dir.pwd)), '/home/vagrant/openwhisk'

  # Prevents "stdin: is not a tty" on Ubuntu (https://github.com/mitchellh/vagrant/issues/1673)
  config.vm.provision 'fix-no-tty', type: 'shell' do |s|
    s.privileged = false
    s.inline = "sudo sed -i '/tty/!s/mesg n/tty -s \\&\\& mesg n/' /root/.profile"
  end

  # Install Software
  config.vm.provision "script_common", type: "shell", keep_color: true, inline: <<-SCRIPT
      set -e
      set -x
      echo "`date`: ubuntu-setup-start" >> /tmp/vagrant-times.txt
      sudo add-apt-repository ppa:git-core/ppa
      sudo rm -rfv /var/lib/apt/lists/* && sed -i 's/# \(.*multiverse$\)/\1/g' /etc/apt/sources.list
      printf 'APT::Install-Recommends "1";\nAPT::Install-Suggests "0";\n' | \
        sudo tee /etc/apt/apt.conf.d/99no-recommends
      sudo apt-get update
      sudo apt-get install git swapspace -y

      HOME=/home/vagrant
      OPENWHISK_HOME=${HOME}/openwhisk
      OPENWHISK_TMP_DIR=${HOME}/.openwhisk/ansible/tmp
      ANSIBLE_HOME=${OPENWHISK_HOME}/ansible
      ANSIBLE_REMOTE_TEMP=${ANSIBLE_HOME}/tmp
      # Add Global environments variables
      # Set remote tmp dir for ansible to fix shared folder problems on Windows
      echo ANSIBLE_HOME=${ANSIBLE_HOME} >> /etc/environment
      echo ANSIBLE_REMOTE_TEMP=${ANSIBLE_REMOTE_TEMP} >> /etc/environment
      echo OPENWHISK_HOME=${OPENWHISK_HOME} >> /etc/environment
      echo OPENWHISK_TMP_DIR=${OPENWHISK_TMP_DIR} >> /etc/environment
      echo PATH=${PATH}:${HOME}/bin:${OPENWHISK_HOME}/tools/build >> /etc/environment

      cd /home/vagrant/openwhisk
      cd tools/ubuntu-setup
      su vagrant -c 'source all.sh'
      echo "`date`: ubuntu-setup-end" >> /tmp/vagrant-times.txt
    SCRIPT

  # Configure Custom Database
  if OW_DB then config.vm.provision "script_db", type: "shell", keep_color: true, inline: <<-SCRIPT
        export ANSIBLE_REMOTE_TEMP=/home/vagrant/openwhisk/ansible/tmp
        export OW_DB=#{ENV['OW_DB']}
        export OW_DB_USERNAME=#{ENV['OW_DB_USERNAME']}
        export OW_DB_PASSWORD=#{ENV['OW_DB_PASSWORD']}
        if [[ $OW_DB == "cloudant" ]]; then
          export OW_DB="Cloudant"
          export OW_DB_PROTOCOL="https"
          export OW_DB_HOST="$OW_DB_USERNAME.cloudant.com"
          export OW_DB_PORT="443"
        else
          export OW_DB="CouchDB"
          export OW_DB_PROTOCOL=#{ENV['OW_DB_PROTOCOL']}
          export OW_DB_HOST=#{ENV['OW_DB_HOST']}
          export OW_DB_PORT=#{ENV['OW_DB_PORT']}
        fi

        cd /home/vagrant/openwhisk/ansible
        su vagrant -c 'ansible-playbook -i environments/local setup.yml'
        su vagrant -c 'ansible-playbook -i environments/local prereq.yml'
    SCRIPT
  end

  unless OW_DB then config.vm.provision "start_couch", type: "shell", keep_color: true, inline: <<-COUCHDB
        echo "`date`: couchdb-setup-start" >> /tmp/vagrant-times.txt
        export ANSIBLE_REMOTE_TEMP=/home/vagrant/openwhisk/ansible/tmp
        cd /home/vagrant/openwhisk/ansible
        su vagrant -c 'ansible-playbook -i environments/local setup.yml'
        su vagrant -c 'ansible-playbook -i environments/local prereq.yml'
        su vagrant -c 'ansible-playbook -i environments/local couchdb.yml'
        echo "`date`: couchdb-setup-end" >> /tmp/vagrant-times.txt
    COUCHDB
  end

  config.vm.provision "initdb", type: "shell", keep_color: true, inline: <<-INITDB
      export ANSIBLE_REMOTE_TEMP=/home/vagrant/openwhisk/ansible/tmp
      cd /home/vagrant/openwhisk/ansible
      su vagrant -c 'ansible-playbook -i environments/local initdb.yml'
  INITDB

  # Build and Deploy
  config.vm.provision "script_end", type: "shell", keep_color: true, inline: <<-SCRIPT, env: {"WHISK_IP" => MACHINE_IP}
    set -e
    set -x
    echo "`date`: build-start" >> /tmp/vagrant-times.txt
    HOME=/home/vagrant
    source /etc/environment
    # Build OpenWhisk using gradle
    cd ${OPENWHISK_HOME}
    su vagrant -c './gradlew  distDocker'

    echo "`date`: deploy-start" >> /tmp/vagrant-times.txt
    # Deploy OpenWhisk using ansible
    cd ${ANSIBLE_HOME}
    su vagrant -c 'ansible-playbook -i environments/local wipe.yml'
    su vagrant -c 'ansible-playbook -i environments/local apigateway.yml'
    su vagrant -c 'ansible-playbook -i environments/local openwhisk.yml'
    su vagrant -c 'ansible-playbook -i environments/local postdeploy.yml'

    # Setup OpenWhisk CLI
    su vagrant -c 'mkdir ${HOME}/bin'
    su vagrant -c 'ln -s ${OPENWHISK_HOME}/tools/admin/wskadmin ${HOME}/bin/wskadmin'
    su vagrant -c 'ln -s ${OPENWHISK_HOME}/tools/build/redo ${HOME}/bin/wskdev'
    echo ${OPENWHISK_HOME}/bin/wsk -i '"$@"' > ${HOME}/bin/wsk
    chmod +x ${HOME}/bin/wsk
    chown vagrant:vagrant ${HOME}/bin/wsk
    PATH=${PATH}:${HOME}/bin
    echo 'eval "`wsk sdk install bashauto --stdout`"'>>${HOME}/.bashrc

    # Run OpenWhisk CLI
    touch $HOME/.wskprops
    chown -R vagrant:vagrant $HOME
    # This allows user to see how to configure the wsk cli outside the VM
    wsk property set --apihost ${WHISK_IP} --auth `cat ${ANSIBLE_HOME}/files/auth.guest`
    echo "Swagger UI URL: https://${WHISK_IP}/api/v1/docs/index.html?url=/api/v1/api-docs"
    wsk action invoke /lambda/utils/echo -p message hello --result
    echo "`date`: build-deploy-end" >> /tmp/vagrant-times.txt
  SCRIPT

  if ENV['gui'] == 'true'
    # Install ubuntu-desktop and virtualbox additions
    config.vm.provision "shell", keep_color: true, inline: "apt-get update"
    config.vm.provision "shell", keep_color: true, inline: "apt-get install -y virtualbox-guest-dkms"
    config.vm.provision "shell", keep_color: true, inline: "apt-get install -y virtualbox-guest-utils"
    config.vm.provision "shell", keep_color: true, inline: "apt-get install -y virtualbox-guest-x11"
    config.vm.provision "shell", keep_color: true, inline: "sed -i 's/allowed_users=.*$/allowed_users=anybody/' /etc/X11/Xwrapper.config"
    #the ; true is used to ignore errors from ubuntu-desktop, vagrant reload should be done after provisioning
    config.vm.provision "shell", keep_color: true, inline: "sudo sh -c 'apt-get install -y ubuntu-desktop ; true'"
  end

end
